<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="Main" Id="{99d93c32-af77-0b47-2160-e8a9eed47eae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	PowerOn			: bool	:= true;	// initialize on, turn false on second scan
	FirstRun		: BOOL := TRUE;		// initialize on, turn false when system has reached starting postion 

	i						: UINT;				// loop index variable
	Step					: XTSSequence;		// primary sequencer
	stCaGroupRef			: AXES_GROUP_REF;
	fbEnableGroup			: MC_GroupEnable;
	fbAddAxis				: ARRAY[1..GVL.NUM_MOVERS] OF MC_AddAxisToGroup;
	fbRemoveAxisFromGroup	: ARRAY[1..GVL.NUM_MOVERS] OF MC_RemoveAxisFromGroup;
	nAtStart: UINT;
	nToStart: UINT;
	
	allMoversHalted: BOOL;

	
	
	MoversReady: BOOL;
	Started: BOOL;
	Resumed: BOOL;
	bLightCurtainEntered: R_TRIG;
	bLightCurtainExited: F_TRIG;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* this program handles the main sequencer of this machine *)

// cyclic call to execute fb's for movers, stations, and zones
FOR i := 1 TO GVL.NUM_MOVERS DO
	GVL.Mover[i]();
	GVL.Mover[i].AxisReference.ReadStatus();
	fbRemoveAxisFromGroup[i](AxesGroup		:= stCaGroupRef);
	fbAddAxis[i](AxesGroup		:= stCaGroupRef,
				Axis			:= GVL.Mover[i].AxisReference);
				
	IF GVL.Mover[i].AxisReference.Status.Moving THEN
				allMoversHalted		:= FALSE;
			END_IF
END_FOR
FOR i := 1 TO GVL.NUM_STATIONS DO
	GVL.Station[i]();
END_FOR
FOR i := 1 TO gvl.NUM_ZONES DO
	GVL.Zone[i]();
END_FOR

// check for HMI STOP/PAUSE
IF HMI.Stop THEN
	HMI.Stop	:= FALSE;
	Step		:= XTSSequence.Stop;
ELSIF HMI.Pause THEN
	HMI.Pause	:= FALSE;
	Step		:= XTSSequence.Pause;
END_IF

CASE Step OF

//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Off:
		// state waiting for start command		----	Movers are off
		
		Initialize();

			IF HMI.StartOver THEN
				Step		:= XTSSequence.EnableMovers;
				Started := TRUE;
				HMI.StartOver := FALSE;
			END_IF
			
			IF HMI.Resume THEN
				Step			:= XTSSequence.EnableMovers;
				Resumed := TRUE;
				HMI.Resume := FALSE;
			END_IF

//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Pause:
	
	FOR i := 1 TO GVL.NUM_MOVERS  DO
		GVL.Mover[i].toPause := TRUE;
	END_FOR
	
	Started := FALSE;
	Resumed := FALSE;
	Step := XTSSequence.Pausing;
	
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Pausing:
	
	// Waiting for all to come to a full stop
	allMoversHalted				:= TRUE;
	
	FOR i := 1 TO GVL.NUM_MOVERS DO
		IF GVL.Mover[i].AxisReference.Status.Moving THEN
			allMoversHalted		:= FALSE;
		END_IF
	END_FOR
	
	IF allMoversHalted THEN
		Step		:= XTSSequence.Off;
	END_IF

//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Stop:
	
	FOR i := 1 TO GVL.NUM_MOVERS  DO
		GVL.Mover[i].toStop := TRUE;
	END_FOR
	
	Started := FALSE;
	Resumed := FALSE;
	Step		:= XTSSequence.Stopping;
		
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Stopping:
		// Waiting for all to come to a full stop
		allMoversHalted				:= TRUE;
	
		FOR i := 1 TO GVL.NUM_MOVERS DO
			IF GVL.Mover[i].AxisReference.Status.Moving THEN
				allMoversHalted		:= FALSE;
			END_IF
		END_FOR
	
	IF allMoversHalted THEN
		Step		:= XTSSequence.RemoveAxes;
	END_IF
	
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.RemoveAxes:
		// remove all axes to collision avoidance group
		// loop through each mover axis and remove CA group
		FOR i:= 1 TO GVL.NUM_MOVERS DO
			fbRemoveAxisFromGroup[i].IdentInGroup := UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
			fbRemoveAxisFromGroup[i].Execute			:= TRUE;
		END_FOR
	
		IF stCaGroupRef.NcToPlc.CA.Common.GroupAxesCount = 0 THEN
			FOR i:= 1 TO GVL.NUM_MOVERS DO
				fbRemoveAxisFromGroup[i].IdentInGroup	:= UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
				fbRemoveAxisFromGroup[i].Execute			:= FALSE;
				MoversReady := FALSE;
		END_FOR
			Step := XTSSequence.DisableMovers;
		END_IF

//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.DisableMovers:
	FOR i := 1 TO GVL.NUM_MOVERS  DO
		GVL.Mover[i].toDisable := TRUE;
	END_FOR
	
	Step := XTSSequence.Off;
		
//-----------------------------------------------------------------------------------------------------------------------			
	XTSSequence.EnableMovers:
		// enable all movers
		FOR i := 1 TO GVL.NUM_MOVERS DO
			IF NOT GVL.Mover[i].Enabled THEN
				GVL.Mover[i].Enable	:= TRUE;
			END_IF
		END_FOR
		
		// check for all enabled
		FOR i := 1 TO GVL.NUM_MOVERS DO
			IF NOT GVL.Mover[i].Enabled THEN
				// not enabled, leave for loop
				EXIT;
			END_IF
			// made it this far, all movers are enabled
			IF i = gvl.NUM_MOVERS THEN
				Step	:= XTSSequence.EnableGroup;
			END_IF
		END_FOR
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.EnableGroup:
	// enable CA group
	fbEnableGroup.Execute := TRUE;
	// verify group enabled successfully
	IF fbEnableGroup.Done = TRUE THEN
		fbEnableGroup.Execute := FALSE;
		Step := XTSSequence.AddAxes;
	END_IF
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.AddAxes:
		// add all axes to collision avoidance group
		// loop through each mover axis and add to CA group
	FOR i:= 1 TO GVL.NUM_MOVERS DO
		fbAddAxis[i].IdentInGroup := UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
		fbAddAxis[i].Execute := TRUE;
	END_FOR
	
	// verify all axes added
	IF stCaGroupRef.NcToPlc.CA.Common.GroupAxesCount = GVL.NUM_MOVERS THEN
		FOR i:= 1 TO GVL.NUM_MOVERS DO
			fbAddAxis[i].IdentInGroup := UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
			fbAddAxis[i].Execute := FALSE;
			MoversReady := TRUE;
			Step	:= XTSSequence.StandBy;
		END_FOR
	END_IF
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.StandBy:
	IF Started THEN
		// first time code executes this far (after power on) move to a start position
		Started := FALSE;
		Step	:= XTSSequence.Start;
	ELSIF Resumed THEN
		// any other time code executes here, resume operation where movers left off
		Resumed := FALSE;
		Step	:= XTSSequence.Run;
	END_IF

//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.Start:
		// request all movers proceed to starting station
IF HMI.bzone0Stop = FALSE THEN
	FOR i:= 1 TO GVL.NUM_MOVERS DO
		GVL.Mover[i].toStart	:= TRUE;
	END_FOR
	// verify one mover is at start, all others have commands and are at zero speed
	nAtStart	:= 0;
	nToStart	:= 0;
	FOR i:= 1 TO GVL.NUM_MOVERS DO
		IF GVL.Mover[i].Step = MoverSequence.AtStart THEN
			nAtStart	:= nAtStart + 1;
		ELSIF GVL.Mover[i].Step = MoverSequence.MovingToStart THEN
			nToStart	:= nToStart + 1;
		END_IF
	END_FOR
	IF nAtStart = 1 AND nToStart = GVL.NUM_MOVERS - 1 THEN
		Step	:= XTSSequence.Run;
	END_IF
END_IF	
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Run:
	(*
	FOR i:= 1 TO GVL.NUM_MOVERS DO
			GVL.Mover[i].toNext	:= TRUE;
		END_FOR
	*)
	
	// LOAD TRAY STATION
	IF GVL.Station[1].Step = StationSequence.MoverPresent THEN
		HMI.dsMoverControlFlags.loadTray_Busy := TRUE;
		IF HMI.dsMoverControlFlags.loadTray_Complete THEN			//IF SENSOR IS TRUE PACKAGE IS PRESENT MOVER GOES TO NEXT STATION
			HMI.dsMoverControlFlags.loadTray_Complete := FALSE;
			GVL.Station[1].bMoveToNext := TRUE;
		END_IF
	ELSE
		HMI.dsMoverControlFlags.loadTray_Busy := FALSE;
	END_IF
	
	// LOAD PARTS STATION 1
	IF GVL.Station[2].Step = StationSequence.MoverPresent THEN
		HMI.dsMoverControlFlags.loadArea1_Busy := TRUE;				//SIGNAL TO ROBOT 1 TO LOAD PARTS
		IF HMI.dsMoverControlFlags.loadArea1_Complete THEN			//SIGNAL FROM ROBOT 1 PARTS COMPLETED
			HMI.dsMoverControlFlags.loadArea1_Complete := FALSE;
			GVL.Station[2].bMoveToNext := TRUE;
		END_IF
	ELSE 
		HMI.dsMoverControlFlags.loadArea1_Busy := FALSE;
	END_IF
	
	// LOAD PARTS STATION 2
	IF GVL.Station[3].Step = StationSequence.MoverPresent THEN
		HMI.dsMoverControlFlags.loadArea2_Busy := TRUE;				//SIGNAL TO ROBOT 2 TO LOAD PARTS
		IF HMI.dsMoverControlFlags.loadArea2_Complete THEN			//SIGNAL FROM ROBOT 2 PARTS COMPLETED
			HMI.dsMoverControlFlags.loadArea2_Complete := FALSE;
			GVL.Station[3].bMoveToNext := TRUE;
		END_IF
	ELSE
		HMI.dsMoverControlFlags.loadArea2_Busy := FALSE;	
	END_IF
	
	// LOAD PARTS STATION 3
	IF GVL.Station[4].Step = StationSequence.MoverPresent THEN
		HMI.dsMoverControlFlags.loadArea3_Busy := TRUE;				//SIGNAL TO ROBOT 3 TO LOAD PARTS
		IF HMI.dsMoverControlFlags.loadArea3_Complete THEN			//SIGNAL FROM ROBOT 3 PARTS COMPLETED
			HMI.dsMoverControlFlags.loadArea3_Complete := FALSE;
			GVL.Station[4].bMoveToNext := TRUE;
		END_IF
	ELSE
		HMI.dsMoverControlFlags.loadArea3_Busy := FALSE;
	END_IF

	// LOAD PARTS STATION 4
	IF GVL.Station[5].Step = StationSequence.MoverPresent THEN
		HMI.dsMoverControlFlags.loadArea4_Busy := TRUE;				//SIGNAL TO ROBOT 4 TO LOAD PARTS
		IF HMI.dsMoverControlFlags.loadArea4_Complete THEN			//SIGNAL FROM ROBOT 4 PARTS COMPLETED
			HMI.dsMoverControlFlags.loadArea4_Complete := FALSE;
			GVL.Station[5].bMoveToNext := TRUE;
		END_IF
	ELSE
		HMI.dsMoverControlFlags.loadArea4_Busy := FALSE;	
	END_IF
	
	// UNLOAD PARTS STATION 
	IF GVL.Station[6].Step = StationSequence.MoverPresent THEN
		HMI.dsMoverControlFlags.unloadTray_Busy := TRUE;			//SIGNAL TO ROBOT 5 TO UNLOAD TRAY
		IF HMI.dsMoverControlFlags.unloadTray_Complete THEN			//SIGNAL FROM ROBOT 5 UNLOAD TRAY COMPLETED
			HMI.dsMoverControlFlags.unloadTray_Complete := FALSE;
			IF HMI.bzone0Stop THEN
				GVL.Station[6].bMoveToNext := TRUE;					//Send to Queue Movers Station
			ELSE
				GVL.Station[6].bMoveToStart := TRUE;					//Send to Load Tray Station
			END_IF

		END_IF
	ELSE
		HMI.dsMoverControlFlags.unloadTray_Busy := FALSE;
	END_IF
	
	// Queue Station used only if Operator is in Zone 1
	IF GVL.Station[7].Step = StationSequence.MoverPresent THEN
		IF HMI.bzone0Stop = FALSE THEN			
			GVL.Station[7].bMoveToStart := TRUE;
		END_IF
	END_IF
	
	IF HMI.StartOver THEN
		Started := TRUE;
		HMI.StartOver := FALSE;
		Step :=	XTSSequence.Standby;
		
	END_IF
	
END_CASE

fbEnableGroup(AxesGroup	:= stCaGroupRef);
LightCurtainCheck();
]]></ST>
    </Implementation>
    <Method Name="Initialize" Id="{4ea4d127-ec11-0953-31c9-c3462af2cac5}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set values of function blocks
	GVL.Station[1].Position		:= 0.0;
	GVL.Station[2].Position		:= 750.0;
	GVL.Station[3].Position		:= 1500.0;
	GVL.Station[4].Position		:= 2250.0;
	GVL.Station[5].Position		:= 3000.0;
	GVL.Station[6].Position		:= 3600.0;
	GVL.Station[7].Position		:= 4250.0;
	GVL.Station[8].Position		:= 4490.0;
	]]></ST>
      </Implementation>
    </Method>
    <Action Name="LightCurtainCheck" Id="{c8440321-cf39-0d36-2897-bf963226c8e3}">
      <Implementation>
        <ST><![CDATA[// ZONE 0  OPERATER LOADING
bLightCurtainEntered(CLK:=HMI.bzone0Stop);
bLightCurtainExited(CLK:=HMI.bzone0Stop);
	IF bLightCurtainEntered.Q THEN
		FOR i:= 1 TO GVL.NUM_MOVERS DO	
			IF GVL.Mover[i].Position >= 4500.0 OR GVL.Mover[i].Position <= 500.0 THEN
			GVL.Mover[i].toPause	:= TRUE;
			GVL.Mover[i].toNext		:= FALSE;
			GVL.Mover[i].toStart	:= FALSE;
			END_IF
		END_FOR
	END_IF
	IF bLightCurtainExited.Q THEN
		FOR i:= 1 TO GVL.NUM_MOVERS DO	
			IF GVL.Mover[i].Position > 4500.0 THEN
				GVL.Mover[i].toStart	:= TRUE;
			END_IF
		END_FOR
	END_IF
	
	
	
	]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Main">
      <LineId Id="110" Count="0" />
      <LineId Id="116" Count="3" />
      <LineId Id="545" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="561" Count="1" />
      <LineId Id="637" Count="0" />
      <LineId Id="635" Count="1" />
      <LineId Id="633" Count="0" />
      <LineId Id="120" Count="9" />
      <LineId Id="336" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="132" Count="5" />
      <LineId Id="602" Count="0" />
      <LineId Id="604" Count="2" />
      <LineId Id="629" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="618" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="467" Count="1" />
      <LineId Id="466" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="476" Count="2" />
      <LineId Id="622" Count="1" />
      <LineId Id="479" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="480" Count="1" />
      <LineId Id="484" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="489" Count="3" />
      <LineId Id="494" Count="6" />
      <LineId Id="488" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="320" Count="2" />
      <LineId Id="338" Count="2" />
      <LineId Id="326" Count="0" />
      <LineId Id="624" Count="1" />
      <LineId Id="319" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="452" Count="1" />
      <LineId Id="465" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="456" Count="2" />
      <LineId Id="403" Count="1" />
      <LineId Id="416" Count="1" />
      <LineId Id="413" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="420" Count="2" />
      <LineId Id="434" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="537" Count="1" />
      <LineId Id="589" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="439" Count="1" />
      <LineId Id="447" Count="1" />
      <LineId Id="443" Count="0" />
      <LineId Id="461" Count="1" />
      <LineId Id="459" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="145" Count="19" />
      <LineId Id="546" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="169" Count="5" />
      <LineId Id="547" Count="0" />
      <LineId Id="175" Count="4" />
      <LineId Id="182" Count="2" />
      <LineId Id="350" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="540" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="593" Count="1" />
      <LineId Id="626" Count="0" />
      <LineId Id="595" Count="2" />
      <LineId Id="627" Count="0" />
      <LineId Id="598" Count="1" />
      <LineId Id="548" Count="0" />
      <LineId Id="195" Count="2" />
      <LineId Id="632" Count="0" />
      <LineId Id="198" Count="15" />
      <LineId Id="290" Count="0" />
      <LineId Id="214" Count="1" />
      <LineId Id="341" Count="0" />
      <LineId Id="343" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="217" Count="3" />
      <LineId Id="580" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="565" Count="1" />
      <LineId Id="225" Count="5" />
      <LineId Id="279" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="567" Count="1" />
      <LineId Id="234" Count="5" />
      <LineId Id="280" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="569" Count="1" />
      <LineId Id="243" Count="5" />
      <LineId Id="281" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="571" Count="1" />
      <LineId Id="252" Count="5" />
      <LineId Id="282" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="573" Count="1" />
      <LineId Id="261" Count="5" />
      <LineId Id="284" Count="0" />
      <LineId Id="645" Count="1" />
      <LineId Id="648" Count="1" />
      <LineId Id="647" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="586" Count="0" />
      <LineId Id="575" Count="1" />
      <LineId Id="270" Count="7" />
      <LineId Id="638" Count="1" />
      <LineId Id="643" Count="1" />
      <LineId Id="640" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="553" Count="1" />
      <LineId Id="628" Count="0" />
      <LineId Id="550" Count="0" />
    </LineIds>
    <LineIds Name="Main.Initialize">
      <LineId Id="31" Count="9" />
    </LineIds>
    <LineIds Name="Main.LightCurtainCheck">
      <LineId Id="1" Count="22" />
    </LineIds>
  </POU>
</TcPlcObject>