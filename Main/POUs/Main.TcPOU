<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="Main" Id="{99d93c32-af77-0b47-2160-e8a9eed47eae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	PowerOn					: BOOL	:= TRUE;	// initialize on, turn false on second scan
	FirstRun				: BOOL	:= TRUE;		// initialize on, turn false when system has reached starting postion 
	i						: UINT;								// loop index variable
	Step					: XTSSequence;						// primary sequencer
	stCaGroupRef			: AXES_GROUP_REF;
	fbEnableGroup			: MC_GroupEnable;
	fbAddAxis				: ARRAY[1..GVL.NUM_MOVERS] OF MC_AddAxisToGroup;
	fbRemoveAxisFromGroup	: ARRAY[1..GVL.NUM_MOVERS] OF MC_RemoveAxisFromGroup;
	nAtStart				: UINT;
	nToStart				: UINT;
	allMoversHalted			: BOOL;	
	allMoversEnabled		: BOOL := FALSE;
	MoversReady				: BOOL;
	Started					: BOOL;		
	Resumed					: BOOL;
	ReStarted				: BOOL;
	bLightCurtainEntered	: R_TRIG;
	bLightCurtainExited		: F_TRIG;
	bEstopPressed			: F_TRIG;
	safeToOpenDoors			: BOOL;
	allMoversNotMoving		: BOOL;
	DelayMoversTimer		: TON;
	
	//Timers for generating a pulse
	PulseTON	: TON;
	PulseTOF	: TOF;
	OnDuration	: TIME := T#500MS;
	OFFDuration	: TIME := T#1000MS;
	bCycleBit	: BOOL;

	//M1 Detection
	fbReadM1DetectMode		: ADSREAD;
	fbReadM1DetectValid		: ADSREAD;
	fbReadM1DetectActive	: ADSREAD;
	fbWriteM1Detect			: ADSWRITE;
	fbDelayM1Timer			: TON;
	IsIdDetectionActive		: BOOL;			// M1 Detection currently underway
	Mover1Found				: BOOL;			// M1 Detection has completed
	Mover1Error				: BOOL;			// M1 Detection has Failed
	M1DetectStep			: M1Detection;	
	M1DetectAttemptCounter	: INT;
	
	bOperatorLoadingTrays	: BOOL;
	StopMoversLoopActive	: BOOL;
	Station2TON				: TON;
	Station3TON				: TON;
	Station4TON				: TON;
	Station5TON				: TON;
	Station6TON				: TON;
	Station7TON				: TON;
	
	bDummyBit				: BOOL;
	//Test					: FB_TcIoXtsEnvironment;
	delayOperatorDone		: BOOL;
	tonDelayOperatorDone	: TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* this program handles the main sequencer of this machine *)
//Machine State is used to display state to HMI
HMI.MachineState := TO_STRING(Step); 
//Test.XpuTcIo(1).MoverTcIo(1).GetDistanceDriven();

// cyclic call to execute fb's for movers
FOR i := 1 TO GVL.NUM_MOVERS DO
	GVL.Mover[i]();
	GVL.Mover[i].AxisReference.ReadStatus();
	fbRemoveAxisFromGroup[i](AxesGroup		:= stCaGroupRef);
	fbAddAxis[i](AxesGroup		:= stCaGroupRef,
				Axis			:= GVL.Mover[i].AxisReference);
	//Monitoring if all movers are in stopped motion state			
	IF GVL.Mover[i].AxisReference.Status.Moving THEN
		allMoversNotMoving	:= FALSE;
	ELSE
		allMoversNotMoving	:= TRUE;
	END_IF
END_FOR

// cyclic call to execute fb's for stations
FOR i := 1 TO GVL.NUM_STATIONS DO
	GVL.Station[i]();
END_FOR

IF HMI.ResetXTS_Error THEN
	FOR i := 1 TO GVL.NUM_MOVERS DO
		GVL.Mover[i].toReset := TRUE;
	END_FOR
	HMI.ResetXTS_Error := FALSE;
END_IF

// E_Stop will halt, disable, and remove power from track and movers
bEstopPressed(CLK:=SafetyGVL.EStopStatus);
IF bEstopPressed.Q THEN
	Step			:= XTSSequence.Stop;
END_IF

// HMI Stop creates a paused state
IF HMI.Stop THEN 
	Step			:= XTSSequence.Paused;
	HMI.Stop		:= FALSE;
END_IF

CASE Step OF
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Off:
		IF SafetyGVL.EStopStatus AND IOGVL.iPowerSupply48VDC1 AND IOGVL.iPowerSupply48VDC2 AND IOGVL.iPowerSupply48VDC3 AND Mover1Found = FALSE THEN
			Initialize();
		END_IF
		// state waiting for HMI.Start
		IF HMI.Start AND Mover1Found THEN
			Step		:= XTSSequence.EnableMovers;
			Started 	:= TRUE;
			HMI.Start 	:= FALSE;
		END_IF

//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Paused:
	
	Station2TON.IN := FALSE;
	Station3TON.IN := FALSE;
	Station4TON.IN := FALSE;
	Station5TON.IN := FALSE;
	Station6TON.IN := FALSE;
	Station7TON.IN := FALSE;
	tonDelayOperatorDone.IN := FALSE;
	
	//state waiting for HMI.Start or HMI.Resume
	IF allMoversNotMoving AND SafetyGVL.AllSafetyOK AND bOperatorLoadingTrays = FALSE THEN	
		IF HMI.ReStart THEN
			ReStarted 	:= TRUE;
			HMI.ReStart := FALSE;
			HMI.Stop  	:= FALSE;
			Step		:= XTSSequence.EnableMovers;
		END_IF
	
		IF HMI.Resume THEN
			Step		:= XTSSequence.EnableMovers;
			Resumed 	:= TRUE;
			HMI.Resume 	:= FALSE;
			HMI.Stop  	:= FALSE;
		END_IF
	END_IF
			
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Stop:
	
		FOR i := 1 TO GVL.NUM_MOVERS  DO
			GVL.Mover[i].toStop := TRUE;
		END_FOR
		
		Started 	:= FALSE;
		Resumed 	:= FALSE;
		Step		:= XTSSequence.Stopping;
		
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Stopping:
		// Waiting for all to come to a full stop
		allMoversHalted		:= TRUE;
		
		FOR i := 1 TO GVL.NUM_MOVERS DO
			IF GVL.Mover[i].AxisReference.Status.Moving THEN
				allMoversHalted		:= FALSE;
			END_IF
		END_FOR
		
		IF allMoversHalted THEN
			Step := XTSSequence.RemoveAxes;
		END_IF
	
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.RemoveAxes:
		// remove all axes to collision avoidance group loop through each mover axis and remove CA group
		FOR i:= 1 TO GVL.NUM_MOVERS DO
			fbRemoveAxisFromGroup[i].IdentInGroup := UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
			fbRemoveAxisFromGroup[i].Execute			:= TRUE;
		END_FOR
	
		IF stCaGroupRef.NcToPlc.CA.Common.GroupAxesCount = 0 THEN
			FOR i:= 1 TO GVL.NUM_MOVERS DO
				fbRemoveAxisFromGroup[i].IdentInGroup	:= UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
				fbRemoveAxisFromGroup[i].Execute			:= FALSE;
				MoversReady := FALSE;
		END_FOR
			Mover1Found := FALSE;
			Step := XTSSequence.DisableMovers;
		END_IF

//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.DisableMovers:
	
		FOR i := 1 TO GVL.NUM_MOVERS  DO
			GVL.Mover[i].toDisable := TRUE;
		END_FOR
		allMoversEnabled := FALSE;
		
		//Disabling Movers if there is E-Stop Condition. This requires all stations to reset themselves.
		Step := XTSSequence.Off;
		
//-----------------------------------------------------------------------------------------------------------------------			
	XTSSequence.EnableMovers:
		// enable all movers
		FOR i := 1 TO GVL.NUM_MOVERS DO
			IF NOT GVL.Mover[i].Enabled THEN
				GVL.Mover[i].Enable	:= TRUE;
			END_IF
		END_FOR
		
		// check for all enabled
		FOR i := 1 TO GVL.NUM_MOVERS DO
			IF NOT GVL.Mover[i].Enabled THEN
				// not enabled, leave for loop
				EXIT;
			END_IF
			// made it this far, all movers are enabled
			IF i = gvl.NUM_MOVERS THEN
				Step	:= XTSSequence.EnableGroup;
			END_IF
		END_FOR
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.EnableGroup:
		// enable CA group
		fbEnableGroup.Execute := TRUE;
		// verify group enabled successfully
		IF fbEnableGroup.Done = TRUE THEN
			fbEnableGroup.Execute := FALSE;
			Step := XTSSequence.AddAxes;
		END_IF
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.AddAxes:
		// add all axes to collision avoidance group
		// loop through each mover axis and add to CA group
		FOR i:= 1 TO GVL.NUM_MOVERS DO
			fbAddAxis[i].IdentInGroup := UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
			fbAddAxis[i].Execute := TRUE;
		END_FOR
		
		// verify all axes added
		IF stCaGroupRef.NcToPlc.CA.Common.GroupAxesCount = GVL.NUM_MOVERS THEN
			FOR i:= 1 TO GVL.NUM_MOVERS DO
				fbAddAxis[i].IdentInGroup := UDINT_TO_IDENTINGROUP(UINT_TO_UDINT(i));
				fbAddAxis[i].Execute := FALSE;
				Step	:= XTSSequence.StandBy;
				allMoversEnabled := TRUE;
			END_FOR
		END_IF
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.StandBy:
		IF Started OR Restarted THEN
			Started		:= FALSE;
			Restarted	:= FALSE;
			Step		:= XTSSequence.Start;
		ELSIF Resumed THEN
			Resumed := FALSE;
			Step	:= XTSSequence.Run;
		END_IF
		
//-----------------------------------------------------------------------------------------------------------------------		
	XTSSequence.Start:
		// request all movers proceed to starting station
		IF bOperatorLoadingTrays = FALSE THEN
			FOR i:= 1 TO GVL.NUM_MOVERS DO
				GVL.Mover[i].toStart	:= TRUE;
			END_FOR
			FOR i:= 2 TO GVL.NUM_STATIONS DO
				IF GVL.Station[i].Step = StationSequence.MoverPresent THEN
					GVL.Station[i].bMoveToStart	:= TRUE;
				END_IF
			END_FOR 
			Step	:= XTSSequence.Run;
		END_IF	
	
//-----------------------------------------------------------------------------------------------------------------------	
	XTSSequence.Run:
		// LOAD TRAY STATION
		IF GVL.Station[1].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.loadTray_Busy := TRUE;
			IF HMI.AutoMode AND IOGVL.iTrayDetectSensor AND bOperatorLoadingTrays = FALSE  THEN			//IF SENSOR IS TRUE PACKAGE IS PRESENT MOVER GOES TO NEXT STATION
				IF delayOperatorDone = FALSE THEN
					GVL.Station[1].bMoveToNext := TRUE;
				END_IF
			ELSIF HMI.AutoMode AND IOGVL.iTrayDetectSensor AND bOperatorLoadingTrays THEN
				delayOperatorDone := TRUE;
			ELSIF HMI.dsMoverControlFlags.loadTray_Complete AND bOperatorLoadingTrays = FALSE THEN	
				HMI.dsMoverControlFlags.loadTray_Complete := FALSE;
				GVL.Station[1].bMoveToNext := TRUE;
			END_IF
		ELSE
			HMI.dsMoverControlFlags.loadTray_Busy := FALSE;
		END_IF
		
		IF delayOperatorDone AND bOperatorLoadingTrays = FALSE AND tonDelayOperatorDone.IN = FALSE THEN
			tonDelayOperatorDone(IN := TRUE, PT := T#1S);
		ELSIF tonDelayOperatorDone.Q THEN
			tonDelayOperatorDone.IN := FALSE;
			delayOperatorDone		:= FALSE;
		END_IF
		
//--------------------		
		// INSPECT TRAY STATION
		IF GVL.Station[2].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.inspectTray_Busy := TRUE;			//Tell Robot Tray is present meaning this station is busy
			IF HMI.AutoMode THEN
 				IF Station2TON.IN = FALSE THEN
					Station2TON(IN := TRUE, PT := T#1S);
				END_IF
			ELSIF HMI.dsMoverControlFlags.inspectTray_Complate THEN
				HMI.dsMoverControlFlags.inspectTray_Complate := FALSE;
				GVL.Station[2].bMoveToNext := TRUE;
			END_IF
			IF Station2TON.Q AND GVL.Station[2].bMoveToNext = FALSE THEN
				Station2TON.IN := FALSE;
				GVL.Station[2].bMoveToNext := TRUE;
			END_IF
		ELSE
			HMI.dsMoverControlFlags.inspectTray_Busy := FALSE;
			Station2TON.IN := FALSE;
		END_IF
		
//--------------------		
		// LOAD PARTS STATION 1
		IF GVL.Station[3].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.loadArea1_Busy := TRUE;			
			IF HMI.AutoMode THEN
 				IF Station3TON.IN = FALSE THEN
					Station3TON(IN := TRUE, PT := T#5S);
				END_IF
			ELSIF HMI.dsMoverControlFlags.loadArea1_Complete THEN
				HMI.dsMoverControlFlags.loadArea1_Complete := FALSE;
				GVL.Station[3].bMoveToNext := TRUE;
			END_IF
			IF Station3TON.Q AND GVL.Station[3].bMoveToNext = FALSE THEN
				Station3TON.IN := FALSE;
				GVL.Station[3].bMoveToNext := TRUE;
			END_IF
		ELSE
			HMI.dsMoverControlFlags.loadArea1_Busy := FALSE;
			Station3TON.IN := FALSE;
		END_IF
		
//--------------------			
		// LOAD PARTS STATION 2
		IF GVL.Station[4].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.loadArea2_Busy := TRUE;			//Tell Robot Tray is present meaning this station is busy
			IF HMI.AutoMode THEN
 				IF Station4TON.IN = FALSE THEN
					Station4TON(IN := TRUE, PT := T#5S);
				END_IF
			ELSIF HMI.dsMoverControlFlags.loadArea2_Complete THEN
				HMI.dsMoverControlFlags.loadArea2_Complete := FALSE;
				GVL.Station[4].bMoveToNext := TRUE;
			END_IF
			IF Station4TON.Q AND GVL.Station[4].bMoveToNext = FALSE THEN
				Station4TON.IN := FALSE;
				GVL.Station[4].bMoveToNext := TRUE;
			END_IF
		ELSE
			HMI.dsMoverControlFlags.loadArea2_Busy := FALSE;
			Station4TON.IN := FALSE;
		END_IF
		
//--------------------		
		// LOAD PARTS STATION 3
		IF GVL.Station[5].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.loadArea3_Busy := TRUE;			//Tell Robot Tray is present meaning this station is busy
			IF HMI.AutoMode THEN
 				IF Station5TON.IN = FALSE THEN
					Station5TON(IN := TRUE, PT := T#5S);
				END_IF
			ELSIF HMI.dsMoverControlFlags.loadArea3_Complete THEN
				HMI.dsMoverControlFlags.loadArea3_Complete := FALSE;
				GVL.Station[5].bMoveToNext := TRUE;
			END_IF
			IF Station5TON.Q AND GVL.Station[5].bMoveToNext = FALSE THEN
				Station5TON.IN := FALSE;
				GVL.Station[5].bMoveToNext := TRUE;
			END_IF
		ELSE
			HMI.dsMoverControlFlags.loadArea3_Busy := FALSE;
			Station5TON.IN := FALSE;
		END_IF
		
 //--------------------   	
		// LOAD PARTS STATION 4
		IF GVL.Station[6].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.loadArea4_Busy := TRUE;			//Tell Robot Tray is present meaning this station is busy
			IF HMI.AutoMode THEN
 				IF Station6TON.IN = FALSE THEN
					Station6TON(IN := TRUE, PT := T#5S);
				END_IF
			ELSIF HMI.dsMoverControlFlags.loadArea4_Complete THEN
				HMI.dsMoverControlFlags.loadArea4_Complete := FALSE;
				GVL.Station[6].bMoveToNext := TRUE;
			END_IF
			IF Station6TON.Q AND GVL.Station[6].bMoveToNext = FALSE THEN
				Station6TON.IN := FALSE;
				GVL.Station[6].bMoveToNext := TRUE;
			END_IF
		ELSE
			HMI.dsMoverControlFlags.loadArea4_Busy := FALSE;
			Station6TON.IN := FALSE;
		END_IF
		
//--------------------
// UNLOAD PARTS STATION 
		IF GVL.Station[7].Step = StationSequence.MoverPresent THEN
			HMI.dsMoverControlFlags.unloadTray_Busy := TRUE;			//Tell Robot Tray is present meaning this station is busy
			IF HMI.AutoMode THEN
 				IF Station7TON.IN = FALSE THEN
					Station7TON(IN := TRUE, PT := T#4S);
				END_IF
			ELSIF HMI.dsMoverControlFlags.unloadTray_Complete THEN
				HMI.dsMoverControlFlags.unloadTray_Complete := FALSE;
				IF bOperatorLoadingTrays THEN
					GVL.Station[7].bMoveToNext := TRUE;					//Send to Queue Movers Station
				ELSE
					GVL.Station[7].bMoveToStart := TRUE;				//Send to Load Tray Station
				END_IF
			END_IF
			IF Station7TON.Q AND GVL.Station[7].bMoveToNext = FALSE THEN
				Station7TON.IN := FALSE;
				IF bOperatorLoadingTrays THEN
					GVL.Station[7].bMoveToNext := TRUE;					//Send to Queue Movers Station
				ELSE
					GVL.Station[7].bMoveToStart := TRUE;				//Send to Load Tray Station
				END_IF
			END_IF
		ELSE
			HMI.dsMoverControlFlags.unloadTray_Busy := FALSE;
			Station7TON.IN := FALSE;
		END_IF
		
//--------------------		
	// Queue Station used only if Operator is in Zone 1
		IF GVL.Station[8].Step = StationSequence.MoverPresent THEN
			IF bOperatorLoadingTrays = FALSE THEN			
				GVL.Station[8].bMoveToStart := TRUE;
			END_IF
		END_IF
		
END_CASE

fbEnableGroup(AxesGroup	:= stCaGroupRef);
LightCurtainCheck();
ShuttleMoverToQueue();
DoorsClosedMonitor();
Station2TON();
Station3TON();
Station4TON();
Station5TON();
Station6TON();
Station7TON();
tonDelayOperatorDone();]]></ST>
    </Implementation>
    <Action Name="DoorsClosedMonitor" Id="{d8e81158-2355-0cf6-0b0a-31222736279d}">
      <Implementation>
        <ST><![CDATA[




IF IOGVL.iDoor1Opened OR IOGVL.iDoor2Opened OR IOGVL.iDoor3Opened OR IOGVL.iDoor4Opened THEN
	SafetyGVL.DoorsClosed := FALSE;
ELSE
	SafetyGVL.DoorsClosed := TRUE;
END_IF


PulseTON(IN := NOT SafetyGVL.AllSafetyOK AND NOT bCycleBit, PT := OnDuration);
PulseTOF(IN := bCycleBit, PT := OFFDuration);

IF PulseTON.Q THEN
	bCycleBit := TRUE;
	IOGVL.oEStopLight := TRUE;
ELSE 
	IOGVL.oEStopLight := FALSE;
END_IF

IF PulseTOF.Q THEN
	bCycleBit := FALSE;
END_IF





]]></ST>
      </Implementation>
    </Action>
    <Method Name="Initialize" Id="{4ea4d127-ec11-0953-31c9-c3462af2cac5}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set values of function blocks
	GVL.Station[1].Position		:= 15.67;				//	Load Tray
	GVL.Station[2].Position		:= 751.07;			//	Inspect Tray
	GVL.Station[3].Position		:= 1573.61;			//	Load Parts 1
	GVL.Station[4].Position		:= 2195.49;			//	Load Parts 2
	GVL.Station[5].Position		:= 2811.86;			//	Load Parts 3
	GVL.Station[6].Position		:= 3434.98;			//	Load Parts 4
	GVL.Station[7].Position		:= 4253.05;			//	Unload Tray
	GVL.Station[8].Position		:= 4667.05;			//	Queue Area if operator is in workspace
	
	CASE M1DetectStep OF		//This Case statement will make 10 attempts to find Mover1 and error if not successful
		
M1Detection.Read:// ------------------------------------------------------- Determine current M1 Detection Status
		
	fbWriteM1Detect.WRITE			:= FALSE;
	
	fbReadM1DetectValid.NETID		:= '';
	fbReadM1DetectValid.PORT		:= 351;
	fbReadM1DetectValid.IDXGRP		:= GVL.pXtsProcessingUnit;
	fbReadM1DetectValid.IDXOFFS		:= 16#03080251;
	fbReadM1DetectValid.LEN			:= SIZEOF( Mover1Found );
	fbReadM1DetectValid.DESTADDR	:= ADR( Mover1Found );
	fbReadM1DetectValid.READ		:= TRUE;
	
	fbReadM1DetectActive.NETID		:= '';
	fbReadM1DetectActive.PORT		:= 351;
	fbReadM1DetectActive.IDXGRP		:= GVL.pXtsProcessingUnit;
	fbReadM1DetectActive.IDXOFFS	:= 16#03080268;
	fbReadM1DetectActive.LEN		:= SIZEOF( IsIdDetectionActive );
	fbReadM1DetectActive.DESTADDR	:= ADR( IsIdDetectionActive );
	fbReadM1DetectActive.READ		:= TRUE;
	
	M1DetectStep 					:= M1Detection.ReadBuffer;
		
M1Detection.ReadBuffer:// ------------------------------------------------------- Buffer

	fbDelayM1Timer( IN := TRUE, PT := T#3000MS );
	IF fbDelayM1Timer.Q THEN
		fbDelayM1Timer.IN				:= FALSE;
		fbReadM1DetectValid.READ		:= FALSE;
		fbReadM1DetectActive.READ		:= FALSE;
		M1DetectAttemptCounter := M1DetectAttemptCounter + 1;
		M1DetectStep 			:= M1Detection.Analyze;
	END_IF
		
M1Detection.Analyze:// ------------------------------------------------------- Determine to activate M1 Detect or ignore
	
IF M1DetectAttemptCounter < 10 THEN
	IF IsIdDetectionActive THEN
		M1DetectStep					:= M1Detection.Read;
	ELSIF Mover1Found THEN
		M1DetectStep					:= M1Detection.Done;	// M1 Detection complete, ready to enable this mover
	ELSE
		M1DetectStep					:= M1Detection.Write;	// M1 Detection hasn't been started yet. So start it!	
	END_IF
ELSE
	M1DetectStep				:= M1Detection.Error;	// M1 Detection Failed
END_IF

M1Detection.Write:// ------------------------------------------------------- Begin M1 Detection

	fbWriteM1Detect.NETID			:= '';
	fbWriteM1Detect.PORT			:= 351;
	fbWriteM1Detect.IDXGRP			:= GVL.pXtsProcessingUnit;
	fbWriteM1Detect.IDXOFFS			:= 16#03080250;
	fbWriteM1Detect.WRITE			:= TRUE;

	M1DetectStep 					:= M1Detection.WriteBuffer;
		
M1Detection.WriteBuffer:// ------------------------------------------------------- Buffer

	fbDelayM1Timer( IN := TRUE, PT := T#2000MS );
		
	IF fbDelayM1Timer.Q THEN
		fbDelayM1Timer.IN				:= FALSE;
		fbWriteM1Detect.WRITE			:= FALSE;
		M1DetectStep 					:= M1Detection.Read;
	END_IF

M1Detection.Done:// ------------------------------------------------------- Finished M1 Detection

	Mover1Found := TRUE;
	IsIdDetectionActive := FALSE;
	M1DetectStep 					:= M1Detection.Read;

M1Detection.Error:// ------------------------------------------------------- Failed M1 Detection

	Mover1Error			:= TRUE;
	IsIdDetectionActive := FALSE;

END_CASE

fbReadM1DetectValid();
fbReadM1DetectActive();
fbWriteM1Detect();
fbDelayM1Timer();
]]></ST>
      </Implementation>
    </Method>
    <Action Name="LightCurtainCheck" Id="{c8440321-cf39-0d36-2897-bf963226c8e3}">
      <Implementation>
        <ST><![CDATA[// ZONE 0  OPERATER LOADING

IF SafetyGVL.CurtainsOK THEN
	bOperatorLoadingTrays := FALSE;
ELSE
	bOperatorLoadingTrays := TRUE;
END_IF


IF SafetyGVL.AllSafetyOK AND allMoversEnabled AND bOperatorLoadingTrays THEN

	FOR i:= 1 TO GVL.NUM_MOVERS DO	
		IF GVL.Mover[i].Position > 4500.0 OR GVL.Mover[i].Position < 250.0 THEN
			GVL.Mover[i].toPause	:= TRUE;
			GVL.Mover[i].toNext		:= FALSE;
			GVL.Mover[i].toStart	:= FALSE;
		END_IF
		DelayMoversTimer.IN := FALSE;
		StopMoversLoopActive := TRUE;
	END_FOR
	
END_IF	
	
IF bOperatorLoadingTrays = FALSE AND DelayMoversTimer.IN = FALSE AND StopMoversLoopActive THEN
	DelayMoversTimer( IN := TRUE, PT := T#1S );
	StopMoversLoopActive := FALSE;
END_IF
		
IF DelayMoversTimer.Q THEN
	FOR i:= 1 TO GVL.NUM_MOVERS DO	
		IF GVL.Mover[i].Position > 4500.0 OR GVL.Mover[i].Position < (GVL.Station[1].Position) THEN
			GVL.Mover[i].toStart	:= TRUE;
		ELSIF GVL.Mover[i].Position > (GVL.Station[1].Position + 1) AND GVL.Mover[i].Position < (GVL.Station[1].Position + 250) THEN
			GVL.Mover[i].toNext	:= TRUE;
		END_IF
	END_FOR
	DelayMoversTimer.IN := FALSE;
END_IF
    
DelayMoversTimer();
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ShuttleMoverToQueue" Id="{1ea195c0-e199-0839-0126-992a39ca089e}">
      <Implementation>
        <ST><![CDATA[
// This will be used for set up if mover is needed to be re-circulated around track

IF 	GVL.Station[1].Step = StationSequence.MoverPresent AND 
	GVL.Station[2].Step = StationSequence.Idle AND 
	GVL.Station[3].Step = StationSequence.Idle AND 
	GVL.Station[4].Step = StationSequence.Idle AND 
	GVL.Station[5].Step = StationSequence.Idle AND 
	GVL.Station[6].Step = StationSequence.Idle AND 
	GVL.Station[7].Step = StationSequence.Idle AND 
	HMI.ShuttleMover THEN
		GVL.Station[1].bMoveToQueue := TRUE;
		HMI.ShuttleMover := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Main">
      <LineId Id="1" Count="0" />
      <LineId Id="686" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="2" Count="13" />
      <LineId Id="17" Count="0" />
      <LineId Id="743" Count="0" />
      <LineId Id="742" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="521" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="524" Count="2" />
      <LineId Id="523" Count="0" />
      <LineId Id="514" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="714" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="716" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="651" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="652" Count="1" />
      <LineId Id="43" Count="4" />
      <LineId Id="340" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="817" Count="6" />
      <LineId Id="1022" Count="0" />
      <LineId Id="816" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="390" Count="1" />
      <LineId Id="713" Count="0" />
      <LineId Id="825" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="381" Count="4" />
      <LineId Id="380" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="787" Count="0" />
      <LineId Id="74" Count="13" />
      <LineId Id="89" Count="14" />
      <LineId Id="105" Count="10" />
      <LineId Id="654" Count="0" />
      <LineId Id="116" Count="4" />
      <LineId Id="712" Count="0" />
      <LineId Id="121" Count="3" />
      <LineId Id="710" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="125" Count="47" />
      <LineId Id="660" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="719" Count="0" />
      <LineId Id="721" Count="3" />
      <LineId Id="869" Count="0" />
      <LineId Id="725" Count="3" />
      <LineId Id="720" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="730" Count="6" />
      <LineId Id="840" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="789" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="209" Count="1" />
      <LineId Id="217" Count="2" />
      <LineId Id="796" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="1004" Count="0" />
      <LineId Id="1013" Count="0" />
      <LineId Id="1007" Count="0" />
      <LineId Id="1010" Count="0" />
      <LineId Id="798" Count="0" />
      <LineId Id="221" Count="2" />
      <LineId Id="1005" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="1015" Count="2" />
      <LineId Id="1019" Count="2" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1027" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="320" Count="2" />
      <LineId Id="800" Count="0" />
      <LineId Id="842" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="843" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="851" Count="1" />
      <LineId Id="849" Count="0" />
      <LineId Id="863" Count="1" />
      <LineId Id="862" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="327" Count="1" />
      <LineId Id="808" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="1026" Count="0" />
      <LineId Id="227" Count="1" />
      <LineId Id="876" Count="16" />
      <LineId Id="871" Count="0" />
      <LineId Id="1025" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="899" Count="16" />
      <LineId Id="895" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="916" Count="17" />
      <LineId Id="259" Count="0" />
      <LineId Id="1023" Count="0" />
      <LineId Id="260" Count="1" />
      <LineId Id="934" Count="16" />
      <LineId Id="270" Count="0" />
      <LineId Id="1024" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="956" Count="7" />
      <LineId Id="973" Count="3" />
      <LineId Id="964" Count="3" />
      <LineId Id="977" Count="3" />
      <LineId Id="968" Count="4" />
      <LineId Id="952" Count="0" />
      <LineId Id="1029" Count="0" />
      <LineId Id="287" Count="6" />
      <LineId Id="981" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="303" Count="3" />
      <LineId Id="415" Count="0" />
      <LineId Id="809" Count="5" />
      <LineId Id="1030" Count="0" />
    </LineIds>
    <LineIds Name="Main.DoorsClosedMonitor">
      <LineId Id="1" Count="30" />
    </LineIds>
    <LineIds Name="Main.Initialize">
      <LineId Id="31" Count="7" />
      <LineId Id="41" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="51" Count="20" />
      <LineId Id="81" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="2" />
      <LineId Id="165" Count="1" />
      <LineId Id="169" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="181" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="106" Count="21" />
      <LineId Id="147" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="150" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="148" Count="0" />
    </LineIds>
    <LineIds Name="Main.LightCurtainCheck">
      <LineId Id="1" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="99" Count="4" />
      <LineId Id="131" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="4" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="136" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="83" Count="2" />
      <LineId Id="120" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="46" Count="0" />
    </LineIds>
    <LineIds Name="Main.ShuttleMoverToQueue">
      <LineId Id="1" Count="13" />
    </LineIds>
  </POU>
</TcPlcObject>